library Regions {
    public boolean RegionsEnabled = true;
    group g = CreateGroup();
    region r[];

    constant integer traininingKey = 0;

    region Training, Vault_Machinery, Vault_Machinery_Leave, Portal_Leave, Portal, Artefatorium_Leave, Room_Workshop_Leave, Workshop_Machinery, Workshop_Core;

    function removeEnumUnit() {
        RemoveUnit(GetEnumUnit());
    }

    function onInit() {
        trigger t = CreateTrigger();

        Training = CreateRegion();
        RegionAddRect(Training, gg_rct_Training);
        TriggerRegisterEnterRegion(t, Training, null);

        Vault_Machinery = CreateRegion();
        RegionAddRect(Vault_Machinery, gg_rct_Vault_Machinery);
        TriggerRegisterEnterRegion(t, Vault_Machinery, null);
        
        Vault_Machinery_Leave = CreateRegion();
        RegionAddRect(Vault_Machinery_Leave, gg_rct_Vault_Machinery_Leave);
        TriggerRegisterEnterRegion(t, Vault_Machinery_Leave, null);

        Portal = CreateRegion();
        RegionAddRect(Portal, gg_rct_Portal);
        TriggerRegisterEnterRegion(t, Portal, null);

        Portal_Leave = CreateRegion();
        RegionAddRect(Portal_Leave, gg_rct_Room_Portal_Leave);
        TriggerRegisterEnterRegion(t, Portal_Leave, null);
        
        Artefatorium_Leave = CreateRegion();
        RegionAddRect(Artefatorium_Leave, gg_rct_Artefatorium_Leave);
        TriggerRegisterEnterRegion(t, Artefatorium_Leave, null);

        Room_Workshop_Leave = CreateRegion();
        RegionAddRect(Room_Workshop_Leave, gg_rct_Room_Workshop_Leave);
        TriggerRegisterEnterRegion(t, Room_Workshop_Leave, null);
        
        Workshop_Machinery = CreateRegion();
        RegionAddRect(Workshop_Machinery, gg_rct_Workshop_Machinery);
        TriggerRegisterEnterRegion(t, Workshop_Machinery, null);
        
        Workshop_Core = CreateRegion();
        RegionAddRect(Workshop_Core, gg_rct_Workshop_Core);
        TriggerRegisterEnterRegion(t, Workshop_Core, null);

        TriggerAddAction(t, function() {
            integer i;
            real x, y;
            if (!RegionsEnabled || GetEnteringUnit() != ArctUnit) return;

            SetPlayerAbilityAvailable(Player(0), 0x41303138, false);
            SetPlayerAbilityAvailable(Player(0), 0x41303537, false);
            SetPlayerAbilityAvailable(Player(0), 0x41303530, false);

            DisableTrigger(gg_trg_Artefactorium_Damage);
            
            SetTerrainFogExBJ(0, 1100.00, 15000.00, 0.50, 0.00, 20.00, 100);
            SetUnitManaPercentBJ(ArctUnit, 100);
            
            if (IsUnitInRegion(Training, ArctUnit)) {
                debug BJDebugMsg("gg_cam_Camera_Abilities");
                SetCameraBoundsToRect(gg_rct_Camera_Bound_Meditate);
                AddUnitAnimationPropertiesBJ(true, "gold", ArctUnit);
                udg_Camera = gg_cam_Camera_Abilities;
                EnableTrigger(gg_trg_Trees_Choose_ESC);
                DisplayTimedTextToForce(GetPlayersAll(), 5.00, "Чтобы открыть новые умения нажмите ESC.");
            }
        
            if (IsUnitInRegion(Vault_Machinery, ArctUnit)) {
                debug BJDebugMsg("gg_rct_Camera_Bounds_Workshop_2");
                SetCameraBoundsToRect(gg_rct_Camera_Bounds_Workshop_2);
                udg_Camera = gg_cam_Camera_Workshop_2;
            }
        
            if (IsUnitInRegion(Workshop_Machinery, ArctUnit)) {
                debug BJDebugMsg("gg_rct_Camera_Bounds_Workshop");
                SetCameraBoundsToRect(gg_rct_Camera_Bounds_Workshop);
                udg_Camera = gg_cam_Camera_Workshop;
            }
            
            if (IsUnitInRegion(Workshop_Core, ArctUnit)) {
                debug BJDebugMsg("gg_rct_Camera_Bounds_Workshop_1");
                SetCameraBoundsToRect(gg_rct_Camera_Bounds_Workshop_1);
                udg_Camera = gg_cam_Camera_Workshop_1;
                if (udg_TutorialHintsOn && !udg_TutorialHint[6] ) {
                    udg_TutorialHint[6] = true;
                    DialogClear(udg_TeleportDialog);
                    DialogSetMessage(udg_TeleportDialog, "Ядро - это магический механизм |nдля раскрытия секретов (талантов),|nдающих Аркту пассивные умения. |nСейчас я раскрою тебе один из них|nи дам необходимые элементы, |nа дальше сам разберёшься. Не|nмаленький уже.");
                    DialogAddButtonBJ(udg_TeleportDialog, "Ничего не понял, но спасибо!");
                    DialogDisplayBJ(true, udg_TeleportDialog, Player(0));
                    x = GetRectCenterX(gg_rct_Workshop_Core);
                    y = GetRectCenterY(gg_rct_Workshop_Core);
                    CreateItem(0x49303132, x, y);
                    for (1 <= i <= 3) CreateItem(0x4930305A, x, y);
                    for (1 <= i <= 2) CreateItem(0x49303130, x, y);
                }
                EnableTrigger(gg_trg_Core_Item_Pickup);
                DisableTrigger(gg_trg_Item_Pickup);
            }
        
            if (IsUnitInRegion(Room_Workshop_Leave, ArctUnit)) {
                debug BJDebugMsg("gg_cam_Camera_Portal_Room");
                SetDayNightModels("DNCLordaeronTerrain.mdx", "DNCLordaeronUnit.mdx");
                SetCameraBoundsToRect(gg_rct_Camera_Bound_Portal);
                udg_Camera = gg_cam_Camera_Portal_Room;
                
                SetUnitX(ArctUnit, GetRectCenterX(gg_rct_Room_Portal_Enter));
                SetUnitY(ArctUnit, GetRectCenterY(gg_rct_Room_Portal_Enter));

                udg_Point = GetRectCenter(gg_rct_Trees_Leave);
                SetUnitFacingToFaceLocTimed(ArctUnit, udg_Point, 0);
                RemoveLocation(udg_Point);
                
                if (udg_Tutorial[1] ) {
                    TransmissionFromUnitWithNameBJ(GetPlayersAll(), gg_unit_hrif_0000, "Беба", gg_snd_8F, "Возле камина Аркт может войти в медитацию в которой может изучить новые навыки. Прямо сейчас у него имеется 1 очко навыка, так что можешь намедитировать что-нибудь новенькое.", bj_TIMETYPE_ADD, 0.00, false);
                    udg_Tutorial[1] = false;
                }
            }
        
            if (IsUnitInRegion(Portal_Leave, ArctUnit)) {
                debug BJDebugMsg("gg_rct_Camera_Bounds_Workshop");
                SetDayNightModels("DNCLordaeronTerrain.mdx", "DNCLordaeronUnit.mdx");
                SetTerrainFogExBJ(0, 1500.00, 10000.00, 0.50, 0.00, 50.00, 100);
                SetCameraBoundsToRect(gg_rct_Camera_Bounds_Workshop);
                udg_Camera = gg_cam_Camera_Workshop;
                
                SetUnitX(ArctUnit, GetRectCenterX(gg_rct_Room_Workshop_Enter));
                SetUnitY(ArctUnit, GetRectCenterY(gg_rct_Room_Workshop_Enter));

                udg_Point = GetRectCenter(gg_rct_Training);
                SetUnitFacingToFaceLocTimed(ArctUnit, udg_Point, 0);
                RemoveLocation(udg_Point);
            }
        
            if (IsUnitInRegion(Portal, ArctUnit)) {
                debug BJDebugMsg("gg_rct_Camera_Bound_Gate");
                SetCameraBoundsToRect(gg_rct_Camera_Bound_Gate);
                udg_Camera = gg_cam_Camera_Portal;
                if (udg_TutorialHintsOn && !udg_TutorialHint[1] ) {
                    udg_TutorialHint[1] = true;
                    DialogClear(udg_TeleportDialog);
                    DialogSetMessage(udg_TeleportDialog, "Сложность можно менять в любое|nвремя, но в начале игры менять её |nне советую: сперва привыкни к |nбоевой системе. На лёгком уровне |nсложности монстры не применяют |nумения. И да, за повышение уровня|nАркта после прохождения подземе-|nлий повышается случайная хар-ка.");
                    DialogAddButtonBJ(udg_TeleportDialog, "Понятно, спасибо!");
                    DialogDisplayBJ(true, udg_TeleportDialog, Player(0));
                }
            }
        
            if (IsUnitInRegion(Vault_Machinery_Leave, ArctUnit)) {
                debug BJDebugMsg("gg_cam_Camera_Artefactorium");
                SuspendHeroXPBJ(false, ArctUnit);
                SetDayNightModels("Environment\\DNC\\DNCLordaeron\\DNCLordaeronTerrain\\DNCLordaeronTerrain.mdl", "Environment\\DNC\\DNCLordaeron\\DNCLordaeronUnit\\DNCLordaeronUnit.mdl");
                LeaderboardDisplayBJ(true, udg_CO_ComboBoard);
                EnablePreSelect(true, true);
                udg_Target = ArctUnit;
                SetCameraBoundsToRect(gg_rct_Camera_Bounds_Artefactorium);
                udg_Camera = gg_cam_Camera_Artefactorium;
                udg_Artefactorium = true;
                udg_Point = GetRectCenter(gg_rct_Artefactorium_Enter);
                SetUnitPositionLoc(ArctUnit, udg_Point);
                RemoveLocation(udg_Point);
                udg_Point = GetRectCenter(gg_rct_Artefactorium_Spawn);
                SetUnitFacingToFaceLocTimed(ArctUnit, udg_Point, 0);
                RemoveLocation(udg_Point);
                SetPlayerAbilityAvailableBJ(true, 0x41303138, Player(0));
                SetPlayerAbilityAvailableBJ(true, 0x41303537, Player(0));
                SetPlayerAbilityAvailableBJ(true, 0x41303530, Player(0));
                EnableTrigger(gg_trg_Artefactorium_Damage);
            }
            
            if (IsUnitInRegion(Artefatorium_Leave, ArctUnit)) {
                debug BJDebugMsg("udg_CO_ComboBoard");
                SetDayNightModels("DNCLordaeronTerrain.mdx", "DNCLordaeronUnit.mdx");
                SetTerrainFogExBJ(0, 1500.00, 10000.00, 0.50, 0.00, 50.00, 100);
                LeaderboardDisplayBJ(false, udg_CO_ComboBoard);
                EnablePreSelect(false, false);
                SetTerrainFogExBJ(0, 500.00, 10000.00, 0.50, 0.00, 50.00, 100);
                SetCameraBoundsToRect(gg_rct_Camera_Bounds_Workshop_2);
                udg_Camera = gg_cam_Camera_Workshop_2;
                udg_Artefactorium = false;
                udg_Point = GetRectCenter(gg_rct_Vault_Machinery_Enter);
                SetUnitPositionLoc(ArctUnit, udg_Point);
                RemoveLocation(udg_Point);
                udg_Point = GetRectCenter(gg_rct_Room_Portal_Enter_2);
                SetUnitFacingToFaceLocTimed(ArctUnit, udg_Point, 0);
                RemoveLocation(udg_Point);
                DestroyEffect(udg_AR_SealEffect);
                ClearTextMessages();
            }
            
            CameraSetupApplyForceDuration(udg_Camera, true, 0.00);
            
            GroupClear(g);
            GetUnitsOfPlayerMatching(Player(11), null);
            ForGroup(g, function removeEnumUnit);
            
            GetUnitsOfPlayerMatching(Player(9), null);
            ForGroup(g, function removeEnumUnit);
        });

        t = null;
    }
}